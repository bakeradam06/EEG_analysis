
% EEG analysis for 2024 MUSC SRD
% Preliminary analysis of TNT EEG CCC data

% Created by AB on 2024-08-29
% Last modified on 2025-07-14

% summary of changes on 2025-01-24:
% 1. made code accept those with weird # of trial (e.g., multiple runs)

% 2025-04-17 changes: removed CMC analysis, moved to new script to analyze
    % CCC and CMC via separate scripts.

% 2025-07-14 changes: updated plotting to put WMFT score in different color
% depending on whether pt reached MCID according to Lin et al 2009 NNR
% (~1.5s). Also changed axes color of WMFT plots depending on this as well. 
 

%% here we go
close all
clear vars

%% paths
basePath = pwd; % needs to be run from TNTanalysis folder 
excelPath = fullfile(basePath, 'step9excel');
addpath(fullfile(basePath, 'scripts'));
% Denote region pairs (n = 28)

% change these to grab from the data instead of using these labels. take
% from excel file (or mat).
pairsCccChar={'PML-S1L';'PML-M1L';'PML-SML';'S1L-M1L';'S1L-SML';'M1L-SML'; ... % ab changed 6th value on 10/25/24 to match step9layout20240820.mat file. it was duplicate M1L-S1L
    'PML-PMN';'PML-S1N';'PML-M1N';'PML-SMN'; ...
    'S1L-PMN';'S1L-S1N';'S1L-M1N';'S1L-SMN'; ...
    'M1L-PMN';'M1L-S1N';'M1L-M1N';'M1L-SMN'; ...
    'SML-PMN';'SML-S1N';'SML-M1N';'SML-SMN'; ...
    'PMN-S1N';'PMN-M1N';'PMN-SMN';'S1N-M1N';'S1N-SMN';'M1N-SMN'};
pairsCmcChar = {'PML','S1L','M1L','SML','PMN','S1N','M1N','SMN'};


%% get file names from path step9excel folder
excelFileNames = dir(fullfile(excelPath,'*.xlsm'));
excelFileNames = string(transpose(extractfield(excelFileNames,'name')));

% make list of all Pt ID's that will be analyzed
allPtID = [];
for L = 1:length(excelFileNames)
    tempID = extractBefore(excelFileNames(L),'_');
    allPtID = [allPtID;tempID];
end
clear tempID L

% get list of sheets from step9excel files
sheetsToRead = {'reason','CCC alpha NoVib','CCC beta NoVib','CCC alpha Vib','CCC beta Vib'};

%% import WMFT data
% ab updated 2024-10-23 to have new WMFT scores after blinded rater assessment
% cd('..')
allDataTNT = readtable("TNT_WMFT_compiled_scores_2024_02_14_AB SRD.xlsx");
subjID = table(allDataTNT.Subject);
subjID.Properties.VariableNames(1) = "subjID"; % change name of column header
wolfTime = table(allDataTNT.x_avgColumnAF_);
wolfTime.Properties.VariableNames(1) = "avgWolfTimes"; % naming of column header
timePoint = table(allDataTNT.OriginalVideoName);
timePoint.Properties.VariableNames(1) = "timePoint"; % same as above for names

% merge to have one table containing all subjID, timePoint, wolf data
wolfData = horzcat(subjID,timePoint,wolfTime);

% finish changing the naming convention of the subjID
for sirius=1:length(wolfData.subjID)
    currentID = wolfData.subjID(sirius);
    if length(wolfData.subjID{sirius}) == 6
        wolfData.subjID{sirius} = regexprep(currentID,'TNT0+','TNT');
    end
end
% rename the timepoints i want. Account for all the variability in file
% names.
for scabbers=1:length(wolfData.timePoint) % different naming conventions used, so need to fix. scabbers just indexing variable
    currentID = wolfData.timePoint{scabbers};
    if contains(wolfData.timePoint{scabbers},"Baseline")
        wolfData.timePoint{scabbers} = "Baseline";
    elseif contains(wolfData.timePoint{scabbers},"BASELINE")
        wolfData.timePoint{scabbers} = "Baseline";
    elseif contains(wolfData.timePoint{scabbers},"B1")
        wolfData.timePoint{scabbers} = "Baseline";
    elseif contains(wolfData.timePoint{scabbers},"Post")
        wolfData.timePoint{scabbers} = "Post";
    elseif contains(wolfData.timePoint{scabbers},"POST")
        wolfData.timePoint{scabbers} = "Post";
    elseif contains(wolfData.timePoint{scabbers},"post")
        wolfData.timePoint{scabbers} = "Post";
    elseif contains(wolfData.timePoint{scabbers},"FU")
        wolfData.timePoint{scabbers} = "FU";
    elseif contains(wolfData.timePoint{scabbers},"FollowUp")
        wolfData.timePoint{scabbers} = "FU";
    elseif contains(wolfData.timePoint{scabbers},"Follow-Up")
        wolfData.timePoint{scabbers} = "FU";
    end
end

timeLabels = {'Pre','Post','Follow up'}; % save this and below for later
timeLabels2 = ["Baseline","Post","FU"];
wolfData.timePoint = cellstr(wolfData.timePoint);
clear Pre Post FU timePoint wolfTime subjID currentID sirius scabbers
%%
% init tables for later of all data across pts & for each condition (Vib, NoVib)
allAlphaPrepNV = table(ones(3,28));
allAlphaExeNV = table(ones(3,28));
allBetaPrepNV = table(ones(3,28));
allBetaExeNV = table(ones(3,28));

% make array to these tables for easy access/loop
tableArray = {allAlphaPrepNV,allAlphaExeNV,allBetaPrepNV,allBetaExeNV};

% change column names of these tables to match pairsCccChar (names of CCC
% pairs)
for q = 1:length(tableArray)
    currentTbl = tableArray{q};
    currentTbl = splitvars(currentTbl, 'Var1');
    currentTbl = renamevars(currentTbl,1:28,pairsCccChar);
    tableArray{q} = currentTbl;
end
clear currentTbl q

% overwrite the original tables in tableArray to the updated tables
allAlphaPrepNV = tableArray{1};
allAlphaExeNV = tableArray{2};
allBetaPrepNV = tableArray{3};
allBetaExeNV = tableArray{4};

masterAlphaPrep = []; % do similar init for freq band/time point im intereted in
masterAlphaExe = [];
masterBetaPrep = [];
masterBetaExe = [];

%% start loop to compile data
for y = 1:length(excelFileNames)
    % name current excel file
    currentExcelFile = excelFileNames(y);
    % take pt ID from current excel file
    currentPt = string(extractBefore(currentExcelFile,'_'));
    % print ID to cmd window
    disp(['currently processing'  currentPt]);

    % figure out later - making import more efficient
    % for r=1:length(sheetToRead)
    %     currentTable = readtable(currentExcelFile,'Sheet',sheetToRead{r});
    %     currentTable =

    % getting data from step9 excel sheets of interest. 
    dataCCCAlphaNV(y) = {readtable(fullfile('step9excel',excelFileNames(y)),'Sheet','CCC Alpha NoVib')};
    dataCCCAlphaV(y) = {readtable(fullfile('step9excel',excelFileNames(y)),'Sheet','CCC Alpha Vib')};
    dataCCCBetaNV(y) = {readtable(fullfile('step9excel',excelFileNames(y)),'Sheet','CCC Beta NoVib')};
    dataCCCBetaV(y) = {readtable(fullfile('step9excel',excelFileNames(y)),'Sheet','CCC Beta Vib')};

    %% NEW ADDITION 2025-01-24 - ab - 
    % this is to be able to include pts with not-typical # of trials/rows
    % (like if they had 3 runs of NoVib or Vib, for example). this way, can
    % index the # of trials available for each run/session

    % Extract filename column for NoVib trials
    filenameColNV = dataCCCAlphaNV{y}.Var1;

    % Find indices of "Post" and "FU" within NoVib filenames
    postIdxNV = find(contains(filenameColNV, 'Post', 'IgnoreCase', true), 1);
    fuIdxNV   = find(contains(filenameColNV, 'FU', 'IgnoreCase', true), 1);

    % Find # of trials for NV based on session (Pre Post or FU)
    % need to do this bc it is not 60 in some cases, like if there were >2 runs

    preTrialsAvailableNV  = postIdxNV - 4; % Adjust for first 3 non-trial rows. count # of post trials (ie pinches)
    postTrialsAvailableNV = fuIdxNV - postIdxNV; % same for Post
    fuTrialsAvailableNV   = size(dataCCCAlphaNV{y}, 1) - fuIdxNV + 1; % same for FU

    % now do the same for Vib
    filenameColV = dataCCCAlphaV{y}.Var1;
    % Find indices of "Post" and "FU" within Vib filenames
    postIdxV = find(contains(filenameColV, 'Post', 'IgnoreCase', true), 1);
    fuIdxV   = find(contains(filenameColV, 'FU', 'IgnoreCase', true), 1);

    preTrialsAvailableV  = postIdxV - 4; % Adjust for first 3 non-trial rows
    postTrialsAvailableV = fuIdxV - postIdxV;
    fuTrialsAvailableV   = size(dataCCCAlphaV{y}, 1) - fuIdxV + 1;
   
    %% Parse out the time segments (-5to-3, -4to-2, etc...) and exclusions

    % exclusions - CCC
    exclusion2NVccc = dataCCCAlphaNV{y}(4:end,5:6);
    % exclusion2V{y} = dataCCCAlphaV{y}(:,5:6);
    % change col names
    exclusion2NVccc.Properties.VariableNames(1) = "pinchIncludeTrial";
    exclusion2NVccc.Properties.VariableNames(2) = "openIncludeTrial";
    % exclusion2V{1, 1}.Properties.VariableNames(1) = "pinch";
    % exclusion2V{1, 1}.Properties.VariableNames(2) = "open";

    %% call subfunction to get alpha CCC data
    [PrePinchNegTwoToZeroNV, PrePinchZeroToTwoNV, ...
        PrePinchNegTwoToZeroV, PrePinchZeroToTwoV, ...
        PostPinchNegTwoToZeroNV, PostPinchZeroToTwoNV, ...
        PostPinchNegTwoToZeroV, PostPinchZeroToTwoV, ...
        FUPinchNegTwoToZeroNV, FUPinchZeroToTwoNV, ...
        FUPinchNegTwoToZeroV, FUPinchZeroToTwoV, lastRowNV, lastRowV] = ...
        sub_getAlphaCCC(dataCCCAlphaNV, dataCCCAlphaV, ...
        preTrialsAvailableNV, postTrialsAvailableNV, fuTrialsAvailableNV, ...
        preTrialsAvailableV, postTrialsAvailableV, fuTrialsAvailableV, ...
        postIdxNV, postIdxV, pairsCccChar, y);
    %% call subfunction for beta CCC data
    [betaPrePinchNegTwoToZeroNV, betaPrePinchZeroToTwoNV, ...
        betaPrePinchNegTwoToZeroV, betaPrePinchZeroToTwoV, ...
        betaPostPinchNegTwoToZeroNV, betaPostPinchZeroToTwoNV, ...
        betaPostPinchNegTwoToZeroV, betaPostPinchZeroToTwoV, ...
        betaFUPinchNegTwoToZeroNV, betaFUPinchZeroToTwoNV, ...
        betaFUPinchNegTwoToZeroV, betaFUPinchZeroToTwoV] = ...
        sub_getBetaCCC(dataCCCBetaNV, dataCCCBetaV, ...
        preTrialsAvailableNV, postTrialsAvailableNV, fuTrialsAvailableNV, ...
        preTrialsAvailableV, postTrialsAvailableV, fuTrialsAvailableV, ...
        postIdxNV, postIdxV, lastRowNV, lastRowV, pairsCccChar, y);

    %%  Merge two sets of tables (thus combining NoVib and Vib).
    %   Still have option for stratifying by condition (i.e., Vib/NoVib) by using the below tables
    %       and including the last 60 trials, since AB vertically concatenat
    %       the Vib trials onto the end of the NoVib trials.

    % for those with all data collected (Pre, Post, FU), the below tables should
    %   have 120row x 28col structure indicating the Coh for each trial of each run
    %   for NoVib, 1:60, then Vib 61:120.

    % % alpha prep CCC
    % alphaPrePinchPrep = vertcat(PrePinchNegTwoToZeroNV,PrePinchNegTwoToZeroV);
    % alphaPostPinchPrep = vertcat(PostPinchNegTwoToZeroNV,PostPinchNegTwoToZeroV);
    % alphaFUPinchPrep = vertcat(FUPinchNegTwoToZeroNV,FUPinchNegTwoToZeroV);
    %
    % % alpha exe CCC
    % alphaPrePinchExe = vertcat(PrePinchNegTwoToZeroNV,PrePinchNegTwoToZeroV);
    % alphaPostPinchExe = vertcat(PostPinchZeroToTwoNV,PostPinchZeroToTwoV);
    % alphaFUPinchExe = vertcat(FUPinchZeroToTwoNV,FUPinchZeroToTwoV);
    %
    % % beta prep CCC
    % betaPrePinchPrep = vertcat(betaPrePinchNegTwoToZeroNV,betaPrePinchNegTwoToZeroV);
    % betaPostPinchPrep = vertcat(betaPostPinchNegTwoToZeroNV,betaPostPinchNegTwoToZeroV);
    % betaFUPinchPrep = vertcat(betaFUPinchNegTwoToZeroNV,betaFUPinchNegTwoToZeroV);
    %
    % % beta exe CCC
    % betaPrePinchExe = vertcat(betaPrePinchNegTwoToZeroNV,betaPrePinchNegTwoToZeroV);
    % betaPostPinchExe = vertcat(betaPostPinchZeroToTwoNV,betaPostPinchZeroToTwoV);
    % betaFUPinchExe = vertcat(betaFUPinchZeroToTwoNV,betaFUPinchZeroToTwoV);

    %% combine all trials together, then add exclusions

    % combined NV trials
    alphaPrepAllNV = vertcat(PrePinchNegTwoToZeroNV,PostPinchNegTwoToZeroNV,FUPinchNegTwoToZeroNV);
    alphaExeAllNV = vertcat(PrePinchZeroToTwoNV,PostPinchZeroToTwoNV,FUPinchZeroToTwoNV);
    betaPrepAllNV = vertcat(betaPrePinchNegTwoToZeroNV,betaPostPinchNegTwoToZeroNV,betaFUPinchNegTwoToZeroNV);
    betaExeAllNV = vertcat(betaPrePinchZeroToTwoNV,betaPostPinchZeroToTwoNV,betaFUPinchZeroToTwoNV);

    % % vert cat to compile everything togerthetr.
    % alphaPrepAllV = vertcat(alphaPrePinchPrep,alphaPostPinchPrep,alphaFUPinchPrep);
    % alphaExeAllV = vertcat(alphaPrePinchExe,alphaPostPinchExe,alphaFUPinchExe);
    % betaPrepAllV = vertcat(betaPrePinchPrep,betaPostPinchPrep,betaFUPinchPrep);
    % betaExeAllV = vertcat(betaPrePinchExe,betaPostPinchExe,betaFUPinchExe);

    % add pinch exclusion2 from noVib and Vib exclusion lists
    % noVib exclusions (1:180)
    % exclusion2NV = vertcat(exclusion2NV{1,1}(4:end,'pinch')); %% add the following for adding Vib exclusions ,(exclusion2V{1,1}(4:end,'pinch')));

    % add the exclusionsAll var to the all alpha, beta data tables
    alphaPrepAllNVExc = horzcat(alphaPrepAllNV,exclusion2NVccc);
    alphaExeAllNVExc = horzcat(alphaExeAllNV,exclusion2NVccc);
    betaPrepAllNVExc = horzcat(betaPrepAllNV,exclusion2NVccc);
    betaExeAllNVExc = horzcat(betaExeAllNV,exclusion2NVccc);

    %% Clear vars not needed anymore (as of 2024-09-04, edit the vars to clear them as needed)

    clear FUPinchNegFiveToThreeNV FUPinchNegFiveToThreeV FUPinchNegFourToTwoNV FUPinchNegFourToTwoV FUPinchNegOneToOneNV FUPinchNegOneToOneV FUPinchNegThreeToOneNV...
        FUPinchNegThreeToOneV FUPinchNegTwoToZeroNV FUPinchNegTwoToZeroV FUPinchOnetoThreeNV FUPinchOnetoThreeV FUPinchThreeToFiveNV FUPinchThreeToFiveV FUPinchTwoToFourNV FUPinchTwoToFourV...
        FUPinchZeroToTwoNV FUPinchZeroToTwoV PostPinchNegFiveToThreeNV PostPinchNegFiveToThreeV PostPinchNegFourToTwoNV PostPinchNegFourToTwoV PostPinchNegOneToOneNV...
        PostPinchNegOneToOneV PostPinchNegThreeToOneNV PostPinchNegThreeToOneV PostPinchNegTwoToZeroNV PostPinchNegTwoToZeroV PostPinchOnetoThreeNV PostPinchOnetoThreeV ...
        PostPinchThreeToFiveNV PostPinchThreeToFiveV PostPinchTwoToFourNV PostPinchTwoToFourV PostPinchZeroToTwoNV PostPinchZeroToTwoV PrePinchNegFiveToThreeNV PrePinchNegFiveToThreeV...
        PrePinchNegFourToTwoNV PrePinchNegFourToTwoV PrePinchNegOneToOneNV PrePinchNegOneToOneV PrePinchNegThreeToOneNV PrePinchNegThreeToOneV PrePinchNegTwoToZeroNV PrePinchNegTwoToZeroV...
        PrePinchOnetoThreeNV PrePinchOnetoThreeV PrePinchThreeToFiveNV PrePinchThreeToFiveV PrePinchTwoToFourNV PrePinchTwoToFourV PrePinchZeroToTwoNV PrePinchZeroToTwoV
    clear betaFUPinchNegFiveToThreeNV betaFUPinchNegFiveToThreeV betaFUPinchNegFourToTwoNV betaFUPinchNegFourToTwoV betaFUPinchNegOneToOneNV betaFUPinchNegOneToOneV...
        betaFUPinchNegThreeToOneNV betaFUPinchNegThreeToOneV betaFUPinchNegTwoToZeroNV betaFUPinchNegTwoToZeroV betaFUPinchOnetoThreeNV betaFUPinchOnetoThreeV ...
        betaFUPinchThreeToFiveNV betaFUPinchThreeToFiveV betaFUPinchTwoToFourNV betaFUPinchTwoToFourV betaFUPinchZeroToTwoNV betaFUPinchZeroToTwoV betaPinchNegFiveToThreeNV...
        betaPinchNegOneToOneNV betaPostPinchNegFiveToThreeNV betaPostPinchNegFiveToThreeV betaPostPinchNegFourToTwoNV betaPostPinchNegFourToTwoV betaPostPinchNegOneToOneNV...
        betaPostPinchNegOneToOneV betaPostPinchNegThreeToOneNV betaPostPinchNegThreeToOneV betaPostPinchNegTwoToZeroNV betaPostPinchNegTwoToZeroV betaPostPinchOnetoThreeNV...
        betaPostPinchOnetoThreeV betaPostPinchThreeToFiveNV betaPostPinchThreeToFiveV betaPostPinchTwoToFourNV betaPostPinchTwoToFourV betaPostPinchZeroToTwoNV betaPostPinchZeroToTwoV...
        betaPrePinchNegFiveToThreeV betaPrePinchNegFourToTwoNV betaPrePinchNegFourToTwoV betaPrePinchNegOneToOneNV betaPrePinchNegOneToOneV betaPrePinchNegThreeToOneNV...
        betaPrePinchNegThreeToOneV betaPrePinchNegTwoToZeroNV betaPrePinchNegTwoToZeroV betaPrePinchOnetoThreeNV betaPrePinchOnetoThreeV betaPrePinchThreeToFiveNV...
        betaPrePinchThreeToFiveV betaPrePinchTwoToFourNV betaPrePinchTwoToFourV betaPrePinchZeroToTwoNV betaPrePinchZeroToTwoV

    %% average the NoVib data for Pre Post and FU
    tableDir = {alphaPrepAllNVExc, alphaExeAllNVExc,betaPrepAllNVExc, betaExeAllNVExc};

    % initialize tables
    connAlphaPrePrepNV = [];
    connAlphaPreExeNV = [];
    connBetaPrePrepNV = [];
    connBetaPreExeNV = [];
    connAlphaPostPrepNV = [];
    connAlphaPostExeNV = [];
    connBetaPostPrepNV = [];
    connBetaPostExeNV = [];
    connAlphaFUPrepNV = [];
    connAlphaFUExeNV = [];
    connBetaFUPrepNV = [];
    connBetaFUExeNV = [];

    for iTable=1:length(tableDir)

        %% alpha Pre Prep CCC
        if iTable == 1
            currentTable = tableDir{1};

            tempMeanPre = [];
            tempMeanPost = [];
            tempMeanFU = [];
            tempValsPre = [];
            tempValsPost = [];
            tempValsFU = [];

            % assign pre trials, account for exclusions
            for rowPre = 1:preTrialsAvailableNV
                if currentTable{rowPre, "pinchIncludeTrial"} == 1
                    tempValsPre = vertcat(tempValsPre, currentTable{rowPre, 1:28});
                end
            end
            % do the same for Post, accounting for exclusions
            for rowPost = preTrialsAvailableNV+1:preTrialsAvailableNV + postTrialsAvailableNV
                if currentTable{rowPost,"pinchIncludeTrial"} == 1
                    tempValsPost = vertcat(tempValsPost,currentTable{rowPost,1:28});
                end
            end

            % now for FU, accounting for exclusions
            for rowFU = preTrialsAvailableNV + postTrialsAvailableNV + 1:preTrialsAvailableNV + postTrialsAvailableNV + fuTrialsAvailableNV
                if currentTable{rowFU,'pinchIncludeTrial'} == 1
                    tempValsFU = vertcat(tempValsFU,currentTable{rowFU,1:28});
                end
            end

            tempMeanPre = mean(tempValsPre,1);    % compute mean across x trials within each brain region pair for pre (results with 1 row (avg over trials) x 28 columns (pairs)
            tempMeanPost = mean(tempValsPost,1);  % do the same for post
            tempMeanFU = mean(tempValsFU,1);      % same fu

            % compile the temp values together
            connAlphaPrePrepNV = tempMeanPre; % rename
            connAlphaPostPrepNV = tempMeanPost;
            connAlphaFUPrepNV = tempMeanFU;

            %%% add the Vib trials here once ready

            %% alpha exe, NV CCC
        elseif iTable == 2
            currentTable = tableDir{2};

            tempMeanPre = [];
            tempMeanPost = [];
            tempMeanFU = [];
            tempValsPre = [];
            tempValsPost = [];
            tempValsFU = [];

            for rowPre = 1:preTrialsAvailableNV
                if currentTable{rowPre, "pinchIncludeTrial"} == 1
                    tempValsPre = vertcat(tempValsPre, currentTable{rowPre,1:28});
                end
            end

            for rowPost = preTrialsAvailableNV+1:preTrialsAvailableNV + postTrialsAvailableNV
                if currentTable{rowPost,"pinchIncludeTrial"} == 1
                    tempValsPost = vertcat(tempValsPost,currentTable{rowPost,1:28});
                end
            end

            for rowFU = preTrialsAvailableNV + postTrialsAvailableNV + 1:preTrialsAvailableNV + postTrialsAvailableNV + fuTrialsAvailableNV
                if currentTable{rowFU, "pinchIncludeTrial"} == 1
                    tempValsFU = vertcat(tempValsFU,currentTable{rowFU,1:28});
                end
            end

            tempMeanPre = mean(tempValsPre,1);
            tempMeanPost = mean(tempValsPost,1);
            tempMeanFU = mean(tempValsFU,1);

            % rename
            connAlphaPreExeNV = tempMeanPre;
            connAlphaPostExeNV = tempMeanPost;
            connAlphaFUExeNV = tempMeanFU;

            % vib can go here once it is investigated

            %% beta prep, NV CCC
        elseif iTable == 3
            currentTable = tableDir{3};

            tempMeanPre = [];
            tempMeanPost = [];
            tempMeanFU = [];
            tempValsPre = [];
            tempValsPost = [];
            tempValsFU = [];

            for rowPre = 1:preTrialsAvailableNV
                if currentTable{rowPre, "pinchIncludeTrial"} == 1
                    tempValsPre = vertcat(tempValsPre, currentTable{rowPre,1:28});
                end
            end

            for rowPost = preTrialsAvailableNV+1:preTrialsAvailableNV + postTrialsAvailableNV
                if currentTable{rowPost,"pinchIncludeTrial"} == 1
                    tempValsPost = vertcat(tempValsPost,currentTable{rowPost,1:28});
                end
            end

            for rowFU = preTrialsAvailableNV + postTrialsAvailableNV + 1:preTrialsAvailableNV + postTrialsAvailableNV + fuTrialsAvailableNV
                if currentTable{rowFU, "pinchIncludeTrial"} == 1
                    tempValsFU = vertcat(tempValsFU,currentTable{rowFU,1:28});
                end
            end

            tempMeanPre = mean(tempValsPre,1);
            tempMeanPost = mean(tempValsPost,1);
            tempMeanFU = mean(tempValsFU,1);

            % rename
            connBetaPrePrepNV = tempMeanPre;
            connBetaPostPrepNV = tempMeanPost;
            connBetaFUPrepNV = tempMeanFU;

            %%% add vib stuff here too

            %% beta exe NV CCC
        elseif iTable == 4
            currentTable = tableDir{4};

            tempMeanPre = [];
            tempMeanPost = [];
            tempMeanFU = [];
            tempValsPre = [];
            tempValsPost = [];
            tempValsFU = [];

            for rowPre = 1:preTrialsAvailableNV
                if currentTable{rowPre, "pinchIncludeTrial"} == 1
                    tempValsPre = vertcat(tempValsPre, currentTable{rowPre,1:28});
                end
            end

            for rowPost = preTrialsAvailableNV+1:preTrialsAvailableNV + postTrialsAvailableNV
                if currentTable{rowPost, "pinchIncludeTrial"} == 1
                    tempValsPost = vertcat(tempValsPost,currentTable{rowPost,1:28});
                end
            end

            for rowFU = preTrialsAvailableNV + postTrialsAvailableNV + 1:preTrialsAvailableNV + postTrialsAvailableNV + fuTrialsAvailableNV
                if currentTable{rowFU, "pinchIncludeTrial"} == 1
                    tempValsFU = vertcat(tempValsFU,currentTable{rowFU,1:28});
                end
            end

            tempMeanPre = mean(tempValsPre,1);
            tempMeanPost = mean(tempValsPost,1);
            tempMeanFU = mean(tempValsFU,1);

            % rename
            connBetaPreExeNV = tempMeanPre;
            connBetaPostExeNV = tempMeanPost;
            connBetaFUExeNV = tempMeanFU;
        end
    end

    %%% add vib code here once ready

    clear dataCCCAlphaNV dataCCCAlphaV dataCCCBetaNV dataCCCBetaV tempMeanFU tempMeanPost...
        tempMeanPre tempValsFU tempValsPost tempValsPre wolfTime exclusion2NVccc currentTable rowPre rowPost rowFU

    %% Compile mean Conn of tables above within loop

    % concatenate the avg Pre, Post, FU points together to make a 3x28
    % matrix, avg coh measure across trials within brain regions

    % alpha Pre
    connAlphaPrepNV = vertcat(connAlphaPrePrepNV,connAlphaPostPrepNV,connAlphaFUPrepNV);
    % alpha Exe
    connAlphaExeNV = vertcat(connAlphaPreExeNV,connAlphaPostExeNV,connAlphaFUExeNV);
    % beta Prep
    connBetaPrepNV = vertcat(connBetaPrePrepNV,connBetaPostPrepNV,connBetaFUPrepNV);
    % beta Exe
    connBetaExeNV = vertcat(connBetaPreExeNV,connBetaPostExeNV,connBetaFUExeNV);

    %% append avg of Pre, Post, FU coh values together across participants into
    % 4 tables: masterAlphaPrep, masterAlphaExe, etc..
    subjectColumn = repmat(currentPt, 84, 1);
    timeColumn = repmat(["Pre"; "Post"; "FU"], 28, 1);
    pairColumn = repmat(pairsCccChar, 3, 1);

    % append coh values together in one column x number of pairs
    cohAlphaPrep = [connAlphaPrepNV(1, :)'; connAlphaPrepNV(2, :)'; connAlphaPrepNV(3, :)'];
    cohAlphaExe = [connAlphaExeNV(1, :)'; connAlphaExeNV(2, :)'; connAlphaExeNV(3, :)'];
    cohBetaPrep = [connBetaPrepNV(1, :)'; connBetaPrepNV(2, :)'; connBetaPrepNV(3, :)'];
    cohBetaExe = [connBetaExeNV(1, :)'; connBetaExeNV(2, :)'; connBetaExeNV(3, :)'];

    % make temp table to append to other subjects later
    tempMasterAlphaPrep = table(subjectColumn, timeColumn, pairColumn, cohAlphaPrep, ...
        'VariableNames', {'subjectID', 'timePoint', 'regionPair', 'cohAlphaPrep'});

    tempMasterAlphaExe = table(subjectColumn, timeColumn, pairColumn, cohAlphaExe, ...
        'VariableNames', {'subjectID', 'timePoint', 'regionPair', 'cohAlphaExe'});

    tempMasterBetaPrep = table(subjectColumn, timeColumn, pairColumn, cohBetaPrep, ...
        'VariableNames', {'subjectID', 'timePoint', 'regionPair', 'cohBetaPrep'});

    tempMasterBetaExe = table(subjectColumn, timeColumn, pairColumn, cohBetaExe, ...
        'VariableNames', {'subjectID', 'timePoint', 'regionPair', 'cohBetaExe'});


    if isempty(masterAlphaPrep)
        masterAlphaPrep = tempMasterAlphaPrep;
    else
        masterAlphaPrep = vertcat(masterAlphaPrep, tempMasterAlphaPrep);
    end
    if isempty(masterAlphaExe)
        masterAlphaExe = tempMasterAlphaExe;
    else
        masterAlphaExe = vertcat(masterAlphaExe, tempMasterAlphaExe);
    end
    if isempty(masterBetaPrep)
        masterBetaPrep = tempMasterBetaPrep;
    else
        masterBetaPrep = vertcat(masterBetaPrep, tempMasterBetaPrep);
    end
    if isempty(masterBetaExe)
        masterBetaExe = tempMasterBetaExe;
    else
        masterBetaExe = vertcat(masterBetaExe, tempMasterBetaExe);
    end

    clear betaPrepAllNVExc alphaExeAllNV betaExeAllNV betaPrepAllNV tempMasterAlphaPrep tempMasterAlphaExe ...
        tempMasterBetaPrep tempMasterBetaExe

    %% start plotting - indiviaul results
    timePoints = [1,2,3];
    t = tiledlayout(2,2); % tiled layout for each subject
    % set dimensions of fig window so legend is in good spot
    set(gcf, 'Position', [100, 100, 1058, 746]);
    cd("figures/");

    %% make temp wolf data
    wolfData.subjID = string(wolfData.subjID);
    wolfData.timePoint = string(wolfData.timePoint);

    for albus=1:height(wolfData)
        idx = contains(wolfData.timePoint,timeLabels2);
        tempWolf = wolfData(idx,:);
    end
    
    %% alpha Prep NV %%
    plotHandlesLeft = [];
    nexttile
    hold on
    for harry=1:(width(connAlphaPrepNV))
        if connAlphaPrepNV(2,harry) < connAlphaPrepNV(1,harry) % if Post < Pre in a given pair (Pre-Post change is primary analysis)
            c = plot(timePoints, connAlphaPrepNV(:,harry),'--o');
        else
            c = plot(timePoints, connAlphaPrepNV(:,harry),'-x');
        end
        plotHandlesLeft = [plotHandlesLeft,c];
    end

    % plot details, left y axis
    ylabel('LaggedCoh');
    % x axis details
    xticks(timePoints);
    xticklabels(timeLabels);

    yyaxis right
    for dumbledore=1:height(tempWolf)
        if tempWolf.subjID{dumbledore} == currentPt
            dataIdx = strcmp(tempWolf.subjID,currentPt);
            tempWolfData = double(tempWolf{dataIdx,3});
        end
    end

    % get WMFT diff from pre to post for viz purposes
    wolfDiffPrePost = tempWolfData(2) - tempWolfData(1);
    wolfDiffPreFU = tempWolfData(3) - tempWolfData(1);

    if wolfDiffPrePost < -1.5 % ~WMFT MCID according to 2009 Lin et al NNR
        q = plot(timePoints,tempWolfData,'-s','LineWidth',2,'Color',[0.75, 1, 0.25]); % lime green if >MCID
        ax = gca;
        ax.YColor = [0, 0.5, 0]; % change color of WMFT axis to be dark green
    else
        q = plot(timePoints,tempWolfData,'-s','LineWidth',2,'Color',[0 0 0.75]); % dark blue if < MCID
        ax = gca;
        ax.YColor = [0, 0, 0.75]; % change color of WMFT axis to be dark blue if <MCID
    end

    ylabel('WMFT time (s)');
    ylim([0,120]);
    title('Alpha Prep');
    %% alpha Exe NV %%%
    plotHandlesLeft = [];
    nexttile
    hold on
    % note to self:
    % make this a function when you have more time
    for harry=1:(width(connAlphaExeNV))
        if connAlphaExeNV(2,harry) < connAlphaExeNV(1,harry)
            c = plot(timePoints, connAlphaExeNV(:,harry),'--o');
        else
            c = plot(timePoints, connAlphaExeNV(:,harry),'-x');
        end
        plotHandlesLeft = [plotHandlesLeft,c];
    end
    % ylabel('LaggedCoh');
    xticks(timePoints);
    xticklabels(timeLabels);

    yyaxis right
    for dumbledore=1:height(tempWolf)
        if tempWolf.subjID{dumbledore} == currentPt
            dataIdx = strcmp(tempWolf.subjID,currentPt);
            tempWolfData = double(tempWolf{dataIdx,3});
        end
    end

   if wolfDiffPrePost < -1.5 % ~WMFT MCID according to 2009 Lin et al NNR
        q = plot(timePoints,tempWolfData,'-s','LineWidth',2,'Color',[0.75, 1, 0.25]); % lime green if >MCID
        ax = gca;
        ax.YColor = [0, 0.5, 0]; % change color of WMFT axis to be dark green
    else
        q = plot(timePoints,tempWolfData,'-s','LineWidth',2,'Color',[0 0 0.75]); % dark blue if < MCID
        ax = gca;
        ax.YColor = [0, 0, 0.75]; % change color of WMFT axis to be dark blue if <MCID
    end
    
    ylabel('WMFT time (s)');
    ax = gca;
    ylim([0,120]);

    title('Alpha Exe');
    %% Beta Prep NV %%%
    plotHandlesLeft = [];
    c = [];
    nexttile
    hold on
    % note to self:
    % make this a function when you got more time
    for harry=1:(width(connBetaPrepNV))
        if connBetaPrepNV(2,harry) < connBetaPrepNV(1,harry)
            c = plot(timePoints, connBetaPrepNV(:,harry),'--o');
        else
            c = plot(timePoints, connBetaPrepNV(:,harry),'-x');
        end
        plotHandlesLeft = [plotHandlesLeft,c];
    end
    ylabel('LaggedCoh');
    xticks(timePoints);
    xticklabels(timeLabels);

    yyaxis right
    for dumbledore=1:height(tempWolf)
        if tempWolf.subjID{dumbledore} == currentPt
            dataIdx = strcmp(tempWolf.subjID,currentPt);
            tempWolfData = double(tempWolf{dataIdx,3});
        end
    end

    if wolfDiffPrePost < -1.5 % ~WMFT MCID according to 2009 Lin et al NNR
        q = plot(timePoints,tempWolfData,'-s','LineWidth',2,'Color',[0.75, 1, 0.25]); % lime green if >MCID
        ax = gca;
        ax.YColor = [0, 0.5, 0]; % change color of WMFT axis to be dark green
    else
        q = plot(timePoints,tempWolfData,'-s','LineWidth',2,'Color',[0 0 0.75]); % dark blue if < MCID
        ax = gca;
        ax.YColor = [0, 0, 0.75]; % change color of WMFT axis to be dark blue if <MCID
    end

    ylabel('WMFT time (s)');
    ax = gca;
    ylim([0,120]);

    title('Beta Prep');
    %% beta Exe NV %%%
    plotHandlesLeft = [];
    c = [];
    q = [];
    nexttile
    hold on
    % note to self:
    % make this a function when you have more time
    for harry=1:(width(connBetaExeNV))
        if connBetaExeNV(2,harry) < connBetaExeNV(1,harry)
            c = plot(timePoints, connBetaExeNV(:,harry),'--o');
        else
            c = plot(timePoints, connBetaExeNV(:,harry),'-x');
        end
        plotHandlesLeft = [plotHandlesLeft,c];
    end
    % ylabel('LaggedCoh');
    xticks(timePoints);
    xticklabels(timeLabels);

    yyaxis right
    for dumbledore=1:height(tempWolf)
        if tempWolf.subjID{dumbledore} == currentPt
            dataIdx = strcmp(tempWolf.subjID,currentPt);
            tempWolfData = double(tempWolf{dataIdx,3});
        end
    end

    if wolfDiffPrePost < -1.5 % ~WMFT MCID according to 2009 Lin et al NNR
        q = plot(timePoints,tempWolfData,'-s','LineWidth',2,'Color',[0.75, 1, 0.25]); % lime green if >MCID
        ax = gca;
        ax.YColor = [0, 0.5, 0]; % change color of WMFT axis to be dark green
    else
        q = plot(timePoints,tempWolfData,'-s','LineWidth',2,'Color',[0 0 0.75]); % dark blue if < MCID
        ax = gca;
        ax.YColor = [0, 0, 0.75]; % change color of WMFT axis to be dark blue if <MCID
    end

    ylabel('WMFT time (s)');
    ax = gca;    
    ylim([0,120]);

    % subplot title
    title('Beta Exe');
    %%  plot detail stuff
    % title for the entire plot
    title(t,currentPt);
    % legend
    allPlotHandles = [plotHandlesLeft,q];
    legendNames = [pairsCccChar;{'WMFT'}];
    lgd = legend(allPlotHandles,legendNames,'Location','northoutside','orientation','horizontal'); % add WMFT to legend.;
    lgd.NumColumns = 10;
    % Adjust position to center the legend horizontally
    lgd.Position = [0.5 - lgd.Position(3)/2, lgd.Position(2), lgd.Position(3), lgd.Position(4)];

    % add some white space to either side of Pre and FU. chatGPT helped
    % with the following loop:
    allAxes = findall(gcf,"Type","axes"); % find all axes from subplots
    for dobbie = 1:length(allAxes) % go trhough all axes from above
        ax = allAxes(dobbie); % make var for all axes as loop goes
        xLimits = xlim(ax); % denote lim of current axis
        % make var of pad amt by adding 10% extra white space to the difference between xLim2 and xLim1
        padding = 0.075* (xLimits(2) - xLimits(1));
        % set new axes based on aboline
        xlim(ax, [xLimits(1) - padding, xLimits(2) + padding]);
    end

    % save fig
    savefig(gcf,strcat(currentPt));
    saveas(gcf,strcat(currentPt,'.png'));
    cd ..;

    clear connAlphaFUExeNV connAlphaFUPrepNV connAlphaPostExeNV connAlphaPreExeNV connAlphaPostPrepNV connAlphaPrePrepNV...
        connBetaFUExeNV connBetaFUPrepNV connBetaPostExeNV connBetaPostPrepNV connBetaPreExeNV connBetaPrePrepNV dobbie...
        albus padding tableDir xLimits harry iTable legendNames allPlotHandles allAxes ax c lgd q t

    %% compile all the data plotted above across participants
%     % convert array to tables
%     connAlphaPrepNV = table(connAlphaPrepNV);
%     connAlphaExeNV = table(connAlphaExeNV);
%     connBetaPrepNV = table(connBetaPrepNV);
%     connBetaExeNV = table(connBetaExeNV);
% 
%     % make currentPt table (for adding currentPt column to the data tables)
%     currentPtTable = table(string(repmat({currentPt},3,1)));
%     currentPtTable.Properties.VariableNames(1) = "subjectID";
% 
%     %% alpha Prep
%     connAlphaPrepNV = splitvars(connAlphaPrepNV,'connAlphaPrepNV');
%     connAlphaPrepNV = renamevars(connAlphaPrepNV,1:28,pairsCccChar);
%     % horz cat subjID identifier
%     tempAllAlphaPrepNV = [currentPtTable,connAlphaPrepNV];
% 
%     if currentPt == "TNT01"
%         allAlphaPrepNV = addvars(allAlphaPrepNV,currentPtTable{:,1},'Before',1,'NewVariableNames','subjectID');
%         allAlphaPrepNV = tempAllAlphaPrepNV;
%     else
%         allAlphaPrepNV = [allAlphaPrepNV;tempAllAlphaPrepNV];
%     end
% 
%     %% alpha Exe
%     connAlphaExeNV = splitvars(connAlphaExeNV,'connAlphaExeNV');
%     connAlphaExeNV = renamevars(connAlphaExeNV,1:28,pairsCccChar);
%     % horz cat subjID identifier
%     tempAllAlphaExeNV = [currentPtTable,connAlphaExeNV];
% 
%     if currentPt == "TNT01"
%         allAlphaExeNV = addvars(allAlphaExeNV,currentPtTable{:,1},'Before',1,'NewVariableNames','subjectID');
%         allAlphaExeNV = tempAllAlphaExeNV;
%     else
%         allAlphaExeNV = [allAlphaExeNV;tempAllAlphaExeNV];
%     end
% 
%     %% beta Prep
%     connBetaPrepNV = splitvars(connBetaPrepNV,'connBetaPrepNV');
%     connBetaPrepNV = renamevars(connBetaPrepNV,1:28,pairsCccChar);
%     % horz cat subjID identifier
%     tempAllBetaPrepNV = [currentPtTable,connBetaPrepNV];
% 
%     if currentPt == "TNT01"
%         allBetaPrepNV = addvars(allBetaPrepNV,currentPtTable{:,1},'Before',1,'NewVariableNames','subjectID');
%         allBetaPrepNV = tempAllBetaPrepNV;
%     else
%         allBetaPrepNV = [allBetaPrepNV;tempAllBetaPrepNV];
%     end
% 
%     %% beta Exe
%     connBetaExeNV = splitvars(connBetaExeNV,'connBetaExeNV');
%     connBetaExeNV = renamevars(connBetaExeNV,1:28,pairsCccChar);
%     % horz cat subjID identifier
%     tempAllBetaExeNV = [currentPtTable,connBetaExeNV];
% 
%     if currentPt == "TNT01"
%         allBetaExeNV = addvars(allBetaExeNV,currentPtTable{:,1},'Before',1,'NewVariableNames','subjectID');
%         allBetaExeNV = tempAllBetaExeNV;
%     else
%         allBetaExeNV = [allBetaExeNV;tempAllBetaExeNV];
%     end
end
%% back to the master subject tables

% sort rows by subject, region pair, timepoint
masterAlphaPrep = sortrows(masterAlphaPrep, {'subjectID', 'regionPair', 'timePoint'}, {'ascend', 'ascend', 'descend'});
masterAlphaExe = sortrows(masterAlphaExe, {'subjectID', 'regionPair','timePoint'}, {'ascend', 'ascend', 'descend'});
masterBetaPrep = sortrows(masterBetaPrep, {'subjectID', 'regionPair', 'timePoint'}, {'ascend', 'ascend', 'descend'});
masterBetaExe = sortrows(masterBetaExe, {'subjectID', 'regionPair', 'timePoint'}, {'ascend', 'ascend', 'descend'});

% clear some vars
clear idx dataIdx dumbledore tempAllAlphaPrepNV tempAllAlphaExeNV tempAllBetaPrepNV tempAllBetaExeNV currentPtTableconnBetaPrepNV connAlphaExeNV connAlphaPrepNV connBetaExeNV currentPtTable ...
    fuIdxNV fuIdxV tempAllAlphaExeNV tempAllBetaExeNV tempAllBetaPrepNV tempWolfData y cohAlphaPrep cohBetaExe cohBetaPrep connBetaPrepNV alphaExeAllNVExc  alphaPrepAllNV alphaPrepAllNVExc betaExeAllNVExc;
%% avg pairs across pts and time points now
% Define list of master tables and corresponding coherence variable names
masterDataList = {masterAlphaPrep, masterAlphaExe, masterBetaPrep, masterBetaExe};
cohVarNames = {'cohAlphaPrep', 'cohAlphaExe', 'cohBetaPrep', 'cohBetaExe'};

% Preallocate a cell array for storing the tables
avgCohTable = cell(1, length(masterDataList));

for dumbledore = 1:length(masterDataList)
    currentTable = masterDataList{dumbledore};

    % Compute mean coherence
    avgCohTable{dumbledore} = groupsummary(currentTable, {'regionPair', 'timePoint'}, 'mean', currentTable.Properties.VariableNames{4});

    % Rename the last column to the correct coherence variable name
    avgCohTable{dumbledore}.Properties.VariableNames{end} = cohVarNames{dumbledore};
end
% pull together all conditions/segmnets (ie alphaPrep, alphaExe, betaPrep,
% betaExe
outputCohAll = join(join(join(avgCohTable{1}, avgCohTable{2}, 'Keys', {'regionPair', 'timePoint'}), ...
    avgCohTable{3}, 'Keys', {'regionPair', 'timePoint'}), ...
    avgCohTable{4}, 'Keys', {'regionPair', 'timePoint'});
outputCohAll = removevars(outputCohAll, ["GroupCount_left","GroupCount_right","GroupCount_left_1","GroupCount_right_1"]);
outputCohAll = sortrows(outputCohAll, {'regionPair', 'timePoint'}, {'ascend', 'descend'});

%% compute pre post differences among pairs
% NOTE: used chatGPT to help with this section.

% Unique combinations
uniqueGroups = unique(masterAlphaPrep(:, {'subjectID', 'regionPair'}));
nGroups = height(uniqueGroups);

% preallocate
PreCoh  = NaN(nGroups, 1);
PostCoh = NaN(nGroups, 1);
FUCoh   = NaN(nGroups, 1);

% Loop through each unique subject-region pair to build the separate lsits
% of coh values for subject
for i = 1:nGroups
    subj   = uniqueGroups.subjectID{i};
    region = uniqueGroups.regionPair{i};

    % For Pre
    idxPre = strcmp(masterAlphaPrep.subjectID, subj) & strcmp(masterAlphaPrep.timePoint, 'Pre') & strcmp(masterAlphaPrep.regionPair, region);
    if any(idxPre)
        PreCoh(i) = masterAlphaPrep.cohAlphaPrep(idxPre);
    end

    % For Post
    idxPost = strcmp(masterAlphaPrep.subjectID, subj) & strcmp(masterAlphaPrep.timePoint, 'Post') & strcmp(masterAlphaPrep.regionPair, region);
    if any(idxPost)
        PostCoh(i) = masterAlphaPrep.cohAlphaPrep(idxPost);
    end

    % For FU
    idxFU = strcmp(masterAlphaPrep.subjectID, subj) & strcmp(masterAlphaPrep.timePoint, 'FU') & strcmp(masterAlphaPrep.regionPair, region);
    if any(idxFU)
        FUCoh(i) = masterAlphaPrep.cohAlphaPrep(idxFU);
    end
end

% Now build the final table
resultTable1 = table(uniqueGroups.subjectID, uniqueGroups.regionPair, PreCoh, PostCoh, FUCoh, ...
    'VariableNames', {'subjectID', 'regionPair', 'PreCoh', 'PostCoh', 'FUCoh'});

% Compute difference scores and percent changes (using Pre as the base)
resultTable1.dPrePost = resultTable1.PostCoh - resultTable1.PreCoh;
resultTable1.dPreFU   = resultTable1.FUCoh - resultTable1.PreCoh;
resultTable1.dPrePostPct = (resultTable1.dPrePost ./ resultTable1.PreCoh) * 100;
resultTable1.dPreFUPct   = (resultTable1.dPreFU   ./ resultTable1.PreCoh) * 100;

%% same for alphaExe

% Get unique combinations of subjectID and regionPair
uniqueGroups = unique(masterAlphaExe(:, {'subjectID', 'regionPair'}));
nGroups = height(uniqueGroups);

% Preallocate arrays for the coherence values
PreCoh  = NaN(nGroups, 1);
PostCoh = NaN(nGroups, 1);
FUCoh   = NaN(nGroups, 1);

% Loop through each unique subject-region pair
for i = 1:nGroups
    subj   = uniqueGroups.subjectID{i};
    region = uniqueGroups.regionPair{i};

    % For Pre
    idxPre = strcmp(masterAlphaExe.subjectID, subj) & strcmp(masterAlphaExe.timePoint, 'Pre') & strcmp(masterAlphaExe.regionPair, region);
    if any(idxPre)
        PreCoh(i) = masterAlphaExe.cohAlphaExe(idxPre);
    end

    % For Post
    idxPost = strcmp(masterAlphaExe.subjectID, subj) & strcmp(masterAlphaExe.timePoint, 'Post') & strcmp(masterAlphaExe.regionPair, region);
    if any(idxPost)
        PostCoh(i) = masterAlphaExe.cohAlphaExe(idxPost);
    end

    % For FU
    idxFU = strcmp(masterAlphaExe.subjectID, subj) & strcmp(masterAlphaExe.timePoint, 'FU') & strcmp(masterAlphaExe.regionPair, region);
    if any(idxFU)
        FUCoh(i) = masterAlphaExe.cohAlphaExe(idxFU);
    end
end

% Now build the final table
resultTable2 = table(uniqueGroups.subjectID, uniqueGroups.regionPair, PreCoh, PostCoh, FUCoh, ...
    'VariableNames', {'subjectID', 'regionPair', 'PreCoh', 'PostCoh', 'FUCoh'});

% Compute difference scores and percent changes (using Pre as the base)
resultTable2.dPrePost = resultTable2.PreCoh - resultTable2.PostCoh;
resultTable2.dPreFU   = resultTable2.PreCoh - resultTable2.FUCoh;
resultTable2.dPrePostPct = (resultTable2.dPrePost ./ resultTable2.PreCoh) * 100;
resultTable2.dPreFUPct   = (resultTable2.dPreFU   ./ resultTable2.PreCoh) * 100;

%% same for betaPrep

% Get unique combinations of subjectID and regionPair
uniqueGroups = unique(masterBetaPrep(:, {'subjectID', 'regionPair'}));
nGroups = height(uniqueGroups);

% Preallocate arrays for the coherence values
PreCoh  = NaN(nGroups, 1);
PostCoh = NaN(nGroups, 1);
FUCoh   = NaN(nGroups, 1);

% Loop through each unique subject-region pair
for i = 1:nGroups
    subj   = uniqueGroups.subjectID{i};
    region = uniqueGroups.regionPair{i};

    % For Pre
    idxPre = strcmp(masterBetaPrep.subjectID, subj) & strcmp(masterBetaPrep.timePoint, 'Pre') & strcmp(masterBetaPrep.regionPair, region);
    if any(idxPre)
        PreCoh(i) = masterBetaPrep.cohBetaPrep(idxPre);
    end

    % For Post
    idxPost = strcmp(masterBetaPrep.subjectID, subj) & strcmp(masterBetaPrep.timePoint, 'Post') & strcmp(masterBetaPrep.regionPair, region);
    if any(idxPost)
        PostCoh(i) = masterBetaPrep.cohBetaPrep(idxPost);
    end

    % For FU
    idxFU = strcmp(masterBetaPrep.subjectID, subj) & strcmp(masterBetaPrep.timePoint, 'FU') & strcmp(masterBetaPrep.regionPair, region);
    if any(idxFU)
        FUCoh(i) = masterBetaPrep.cohBetaPrep(idxFU);
    end
end

% Now build the final table
resultTable3 = table(uniqueGroups.subjectID, uniqueGroups.regionPair, PreCoh, PostCoh, FUCoh, ...
    'VariableNames', {'subjectID', 'regionPair', 'PreCoh', 'PostCoh', 'FUCoh'});

% Compute difference scores and percent changes (using Pre as the base)
resultTable3.dPrePost = resultTable3.PreCoh - resultTable3.PostCoh;
resultTable3.dPreFU   = resultTable3.PreCoh - resultTable3.FUCoh;
resultTable3.dPrePostPct = (resultTable3.dPrePost ./ resultTable3.PreCoh) * 100;
resultTable3.dPreFUPct   = (resultTable3.dPreFU   ./ resultTable3.PreCoh) * 100;

%% same for betaExe

% Get unique combinations of subjectID and regionPair
uniqueGroups = unique(masterBetaPrep(:, {'subjectID', 'regionPair'}));
nGroups = height(uniqueGroups);

% Preallocate arrays for the coherence values
PreCoh  = NaN(nGroups, 1);
PostCoh = NaN(nGroups, 1);
FUCoh   = NaN(nGroups, 1);

% Loop through each unique subject-region pair
for i = 1:nGroups
    subj   = uniqueGroups.subjectID{i};
    region = uniqueGroups.regionPair{i};

    % For Pre
    idxPre = strcmp(masterBetaExe.subjectID, subj) & strcmp(masterBetaExe.timePoint, 'Pre') & strcmp(masterBetaExe.regionPair, region);
    if any(idxPre)
        PreCoh(i) = masterBetaExe.cohBetaExe(idxPre);
    end

    % For Post
    idxPost = strcmp(masterBetaExe.subjectID, subj) & strcmp(masterBetaExe.timePoint, 'Post') & strcmp(masterBetaExe.regionPair, region);
    if any(idxPost)
        PostCoh(i) = masterBetaExe.cohBetaExe(idxPost);
    end

    % For FU
    idxFU = strcmp(masterBetaExe.subjectID, subj) & strcmp(masterBetaExe.timePoint, 'FU') & strcmp(masterBetaExe.regionPair, region);
    if any(idxFU)
        FUCoh(i) = masterBetaExe.cohBetaExe(idxFU);
    end
end

% Now build the final table
resultTable4 = table(uniqueGroups.subjectID, uniqueGroups.regionPair, PreCoh, PostCoh, FUCoh, ...
    'VariableNames', {'subjectID', 'regionPair', 'PreCoh', 'PostCoh', 'FUCoh'});

% Compute difference scores and percent changes (using Pre as the base)
resultTable4.dPrePost = resultTable4.PreCoh - resultTable4.PostCoh;
resultTable4.dPreFU   = resultTable4.PreCoh - resultTable4.FUCoh;
resultTable4.dPrePostPct = (resultTable4.dPrePost ./ resultTable4.PreCoh) * 100;
resultTable4.dPreFUPct   = (resultTable4.dPreFU   ./ resultTable4.PreCoh) * 100;

%% rename the resultTables, then export to csv without grouping across pts and time point
resAlphaPrep = resultTable1;
resAlphaExe = resultTable2;
resBetaPrep = resultTable3;
resBetaExe = resultTable4;

writetable(resAlphaPrep,'resAlphaPrep.csv');
writetable(resAlphaExe,'resAlphaExe.csv');
writetable(resBetaPrep,'resBetaPrep.csv');
writetable(resBetaExe,'resBetaExe.csv');


%% average all the changes across participatns by pair and time point
alphaPrepMaster = groupsummary(resultTable1, 'regionPair', 'mean', ...
    {'PreCoh', 'PostCoh', 'FUCoh', 'dPrePost', 'dPreFU', 'dPrePostPct', 'dPreFUPct'});

alphaExeMaster = groupsummary(resultTable2, 'regionPair', 'mean', ...
    {'PreCoh', 'PostCoh', 'FUCoh', 'dPrePost', 'dPreFU', 'dPrePostPct', 'dPreFUPct'});

betaPrepMaster = groupsummary(resultTable3, 'regionPair', 'mean', ...
    {'PreCoh', 'PostCoh', 'FUCoh', 'dPrePost', 'dPreFU', 'dPrePostPct', 'dPreFUPct'});

betaExeMaster = groupsummary(resultTable4, 'regionPair', 'mean', ...
    {'PreCoh', 'PostCoh', 'FUCoh', 'dPrePost', 'dPreFU', 'dPrePostPct', 'dPreFUPct'});

writetable(alphaPrepMaster,'alphaPrepMasterCombine.csv');
writetable(alphaExeMaster,'alphaExeMasterCombine.csv');
writetable(betaPrepMaster,'betaPrepMasterCombine.csv');
writetable(betaExeMaster,'betaExeMasterCombine.csv');

%% other miscellanous tasks
allAlphaPrepNV.subjectID = convertCharsToStrings(allAlphaPrepNV.subjectID);

%% for loop for plotting frequency/ across subjects
% ab used for MUSC SRD 2024

tableArray = {allAlphaPrepNV,allAlphaExeNV,allBetaPrepNV,allBetaExeNV};

% call function for plotting alphaPrep across subjs
sub_SRDfiguresInterSubject(allAlphaPrepNV,allAlphaExeNV,allBetaPrepNV, ...
    allBetaExeNV,timePoints,plotHandlesLeft,timeLabels,tempWolf,allPtID,excelFileNames)